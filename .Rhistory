# DATA FOLDER
datapath = '/Users/changlu/DATA/sma-ffpe/peakcsv'
# List all .csv files in the folder
csv_files <- list.files(path = datapath, pattern = "\\.csv$", full.names = TRUE)
csv_files
# List all .csv files in the folder
csv_files <- list.files(path = datapath, pattern = "\\.csv$", full.names = FALSE)
print(csv_files)
read.csv(csv_files[i])
i = 1
read.csv(csv_files[i])
# DATA FOLDER
datapath = '/Users/changlu/DATA/sma-ffpe/peakcsv'
# List all .csv files in the folder
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# DATA FOLDER
datapath = '/Users/changlu/DATA/sma-ffpe/peakcsv'
csv_files <- list.files(path = datapath, pattern = "\\.csv$", full.names = TRUE)
i = 1
peak_df <- read.csv(csv_files[i])
View(peak_df)
i = 1
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
coordinates(coords) <- ~x + y
library(spdep)
install.packages("spdep")
library(spdep)
i = 1
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
coordinates(coords) <- ~x + y
library(spdep)
nb <- knn2nb(knearneigh(coords, k = 4))  # k = 4 is for the 4 nearest neighbors
listw <- nb2listw(nb, style = "W")  # W is the weight style (row-standardized)
# Function to calculate Moran's I for each column except x and y
calculate_morans_I <- function(df, listw) {
morans_I_results <- sapply(names(df)[!(names(df) %in% c("x", "y"))], function(col) {
moran.test(df[[col]], listw)$estimate["Moran I"]
})
return(morans_I_results)
}
# Calculate Moran's I for all columns except x and y
morans_I_values <- calculate_morans_I(peak_df, listw)
# Function to calculate Moran's I for each column except x and y
morans_I_results <- sapply(names(peak_df)[!(names(peak_df) %in% c("x", "y"))], function(col) {moran.test(df[[col]], listw)$estimate["Moran I"]}
# DATA FOLDER
datapath = '/Users/changlu/DATA/sma-ffpe/peakcsv'
# DATA FOLDER
datapath = '/Users/changlu/DATA/sma-ffpe/peakcsv'
csv_files <- list.files(path = datapath, pattern = "\\.csv$", full.names = TRUE)
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
peak_df <- read.csv(csv_files[i])
i = 1
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
nb <- knn2nb(knearneigh(coords, k = 4))  # k = 4 is for the 4 nearest neighbors
library(spdep)
nb <- knn2nb(knearneigh(coords, k = 4))  # k = 4 is for the 4 nearest neighbors
listw <- nb2listw(nb, style = "W")  # W is the weight style (row-standardized)
# Function to calculate Moran's I for each column except x and y
# Function to calculate Moran's I for each column except x and y
morans_I_results <- sapply(names(peak_df)[!(names(peak_df) %in% c("x", "y"))], function(col) {moran.test(df[[col]], listw)$estimate["Moran I"]})
# Calculate Moran's I for all columns except x and y
morans_I_values <- calculate_morans_I(peak_df, listw)
# Print the results
print(morans_I_values)
# Calculate Moran's I for all columns except x and y
morans_I_results <- sapply(colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))], function(col) {moran.test(peak_df[[col]], listw)$estimate["Moran I"]})
# Print the results
print(morans_I_values)
colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))],
colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))]
# Calculate Moran's I for all columns except x and y
morans_I_results <- sapply(colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))], function(col) {moran.test(peak_df[,col], listw)$estimate["Moran I"]})
moran.test(peak_df[,col], listw)
col = "X837.42138"
moran.test(peak_df[,col], listw)
a = moran.test(peak_df[,col], listw)
a$estimate
a$statistic
a$estimate
c(a$estimate,a$statistic,a$p.value)
a$p.value
a$statistic
c(a$estimate,a$statistic,a$p.value)
return(c(a$estimate,a$statistic,a$p.value))
# Calculate Moran's I for all columns except x and y
morans_I_results <- sapply(colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))], function(col) {
a = moran.test(peak_df[,col], listw)
return(c(a$estimate,a$statistic,a$p.value))
})
morans_I_results
rownames(morans_I_results)
rownames(morans_I_results)[5] <- 'pvalue'
rownames(morans_I_results)
View(morans_I_results)
morans_I_results <- t(morans_I_results)
View(morans_I_results)
View(morans_I_results)
View(peak_df)
library(ggplot)
library(ggplot2)
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627))
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627))+
scale_colour_gradient(low = "white", high = "darkred")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 1)+
scale_colour_gradient(low = "white", high = "darkred")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 1)+
scale_colour_gradient(low = "white", high = "darkred")+
theme_void()
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 1)+
scale_colour_gradient(low = "white", high = "red")+
theme_void()
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 1)+
scale_colour_gradient(low = "white", high = "red")
View(morans_I_results)
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 1)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1931.16877), size  = 1)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1931.16877), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
csv_files
mean(morans_I_results[,1])
i = 2
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
nb <- knn2nb(knearneigh(coords, k = 4))  # k = 4 is for the 4 nearest neighbors
listw <- nb2listw(nb, style = "W")  # W is the weight style (row-standardized)
# Calculate Moran's I for all columns except x and y
morans_I_results <- sapply(colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))], function(col) {
a = moran.test(peak_df[,col], listw)
return(c(a$estimate,a$statistic,a$p.value))
})
rownames(morans_I_results)[5] <- 'pvalue'
morans_I_results <- t(morans_I_results)
mean(morans_I_results[,1])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1931.16877), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
csv_names <- tools::file_path_sans_ext(list.files(path = folder_path, pattern = "\\.csv$", full.names = FALSE))
csv_names <- tools::file_path_sans_ext(list.files(path = datapath, pattern = "\\.csv$", full.names = FALSE))
csv_names
mean(morans_I_results[,1])
moran_mean = list(length(csv_files))
moran_mean
moran_mean =  vector("list", length = 5)
for(i in 1:length(csv_files)){
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
nb <- knn2nb(knearneigh(coords, k = 4))  # k = 4 is for the 4 nearest neighbors
listw <- nb2listw(nb, style = "W")  # W is the weight style (row-standardized)
# Calculate Moran's I for all columns except x and y
morans_I_results <- sapply(colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))], function(col) {
a = moran.test(peak_df[,col], listw)
return(c(a$estimate,a$statistic,a$p.value))
})
rownames(morans_I_results)[5] <- 'pvalue'
morans_I_results <- t(morans_I_results)
write.csv(morans_I_results, file=paste0('/Users/changlu/DATA/sma-ffpe/resultCL/', csv_names[i],'.csv'))
moran_mean[i] <- mean(morans_I_results[,1])
}
paste0('/Users/changlu/DATA/sma-ffpe/resultCL/', csv_names[i],'.csv')
write.csv(morans_I_results, file=paste0('/Users/changlu/DATA/sma-ffpe/resultCL/', csv_names[i],'.csv'))
morans_I_results
paste0('/Users/changlu/DATA/sma-ffpe/resultCL/', csv_names[i],'.csv')
write.csv(morans_I_results, file=paste0('/Users/changlu/DATA/sma-ffpe/resultCL/', csv_names[i],'.csv'))
moran_mean =  vector("list", length = 5)
for(i in 1:length(csv_files)){
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
nb <- knn2nb(knearneigh(coords, k = 4))  # k = 4 is for the 4 nearest neighbors
listw <- nb2listw(nb, style = "W")  # W is the weight style (row-standardized)
# Calculate Moran's I for all columns except x and y
morans_I_results <- sapply(colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))], function(col) {
a = moran.test(peak_df[,col], listw)
return(c(a$estimate,a$statistic,a$p.value))
})
rownames(morans_I_results)[5] <- 'pvalue'
morans_I_results <- t(morans_I_results)
write.csv(morans_I_results, file=paste0('/Users/changlu/DATA/sma-ffpe/resultCL/', csv_names[i],'.csv'))
moran_mean[i] <- mean(morans_I_results[,1])
}
moran_mean
library(spdep)
library(ggplot2)
library(spdep)
library(ggplot2)
# DATA FOLDER
datapath = '/Users/changlu/DATA/sma-ffpe/peakcsv'
csv_files <- list.files(path = datapath, pattern = "\\.csv$", full.names = TRUE)
csv_names <- tools::file_path_sans_ext(list.files(path = datapath, pattern = "\\.csv$", full.names = FALSE))
csv_names
moran_mean =  vector("list", length = 5)
for(i in 1:length(csv_files)){
peak_df <- read.csv(csv_files[i])
coords <- peak_df[, c("x", "y")]
nb <- knn2nb(knearneigh(coords, k = 4))  # k = 4 is for the 4 nearest neighbors
listw <- nb2listw(nb, style = "W")  # W is the weight style (row-standardized)
# Calculate Moran's I for all columns except x and y
morans_I_results <- sapply(colnames(peak_df)[!(colnames(peak_df) %in% c("x", "y"))], function(col) {
a = moran.test(peak_df[,col], listw)
return(c(a$estimate,a$statistic,a$p.value))
})
rownames(morans_I_results)[5] <- 'pvalue'
morans_I_results <- t(morans_I_results)
write.csv(morans_I_results, file=paste0('/Users/changlu/DATA/sma-ffpe/resultCL/', csv_names[i],'.csv'))
moran_mean[i] <- mean(morans_I_results[,1])
}
moran_mean
i = 1
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1931.16877), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 1
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X951.47817), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 3
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X951.47817), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 3
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1539.74377), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 1
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1539.74377), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 1
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 3
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 2
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 4
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 5
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i =3
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 1
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
i = 3
peak_df <- read.csv(csv_files[i])
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1352.62627), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
ggplot(data = peak_df)+
geom_point(mapping = aes(x = x, y = y, colour = X1551.75837), size  = 0.5)+
scale_colour_gradient(low = "white", high = "red")
